# Advanced CI/CD Pipeline for Assignment
# This workflow demonstrates a 3-stage pipeline (Grade E requirement)

name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      deploy_production:
        description: 'Deploy to production'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-tag: ${{ steps.build-info.outputs.build-tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: Generate version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Set build information
        id: build-info
        run: |
          BUILD_TAG="build-$(date +%Y%m%d)-${{ github.run_number }}"
          echo "build-tag=$BUILD_TAG" >> $GITHUB_OUTPUT
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV

      - name: Build application
        env:
          NODE_ENV: production
          BUILD_TAG: ${{ steps.build-info.outputs.build-tag }}
          APP_VERSION: ${{ steps.version.outputs.version }}
        run: npm run build

      - name: Create deployment packages
        run: |
          cd build
          zip -r ../build.zip .
          tar -czf ../build.tar.gz .
          cd ..

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build.zip
            build.tar.gz
            build/build-info.json
          retention-days: 30

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Extract build artifact
        run: unzip build.zip -d staging-deployment/

      - name: Deploy to staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ format('staging-v{0}-{1}', needs.build.outputs.version, github.run_number) }}
          NOTE: ${{ vars.RELEASE_NOTE || 'Testing pre-production release' }}
        run: |
          echo "Deploying to staging environment..."
          echo "Tag: $TAG"
          echo "Release notes: $NOTE"
          
          # Create staging release
          gh release create "$TAG" build.zip \
            --title "Staging Release $TAG" \
            --notes "$NOTE" \
            --prerelease

      - name: Run staging tests
        run: |
          echo "Running staging validation tests..."
          # Add staging-specific tests here

  deploy-production:
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    if: github.event.inputs.deploy_production == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Extract build artifact
        run: unzip build.zip -d production-deployment/

      - name: Deploy to production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ format('prod-v{0}-{1}', needs.build.outputs.version, github.run_number) }}
          NOTE: ${{ vars.RELEASE_NOTE || format('Production release v{0}', needs.build.outputs.version) }}
        run: |
          echo "Deploying to production environment..."
          echo "Tag: $TAG"
          echo "Release notes: $NOTE"
          
          # Create production release (not prerelease)
          gh release create "$TAG" build.zip build.tar.gz \
            --title "Production Release $TAG" \
            --notes "$NOTE" \
            --latest

      - name: Post-deployment verification
        run: |
          echo "Running post-deployment verification..."
          # Add production verification tests here

      - name: Notify deployment success
        run: |
          echo "ðŸŽ‰ Production deployment successful!"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Build Tag: ${{ needs.build.outputs.build-tag }}"